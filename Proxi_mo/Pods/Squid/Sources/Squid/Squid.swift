//
//  Squid.swift
//  Squid
//
//  Created by Oliver Borchert on 9/17/19.
//

import Foundation

/// This struct simply provides a scope for global "utility" structures that need to be accessible
/// publicly.
public struct Squid {

    /// This enum is used for *all* errors that are generated by this library. Any external errors
    /// are wrapped as `unknown` errors.
    public enum Error: Swift.Error {

        internal static func ensure(_ error: Swift.Error) -> Squid.Error {
            if let err = error as? Squid.Error {
                return err
            } else {
                return .unknown(error)
            }
        }

        // MARK: User Error
        /// The scheduled request is invalid due to some form of invalid parameters. This error e.g.
        /// occurs when a request with method GET or DELETE is scheduled and has a non-empty body.
        case invalidRequest(message: String)

        /// Scheduling a request failed as the provided parameters cannot be encoded as desired
        /// into a valid HTTP request.
        case encodingFailed

        /// A request's response failed due to some decoding failure when serializing the response.
        /// This error is *not* thrown when JSON decoding fails.
        case decodingFailed

        // MARK: Connection Error
        /// The scheduled request did not receive a response from the server due to a timeout.
        case timeout

        /// The scheduled request did not receive a response as there is no internet connection.
        case noConnection

        /// The url of the scheduled request is invalid.
        case invalidUrl

        /// The host of the url of the scheduled request could not be found.
        case unknownHost

        // MARK: Request Error
        /// The response from the server could not be parsed as desired.
        case invalidResponse

        /// The request resulted in a response from the server, however, the response indicates
        /// failure. The application-specific reason for the failure may be derived from the status
        /// code and the actual response.
        case requestFailed(statusCode: Int, response: Data)

        /// A stream constructed by a `WebSocketRequest` was closed by the peer.
        case closedStream(code: URLSessionWebSocketTask.CloseCode)

        // MARK: Misc
        /// An error indicating that a paginated request is already in progress and a new one will
        /// not be scheduled at the moment.
        case requestInProgress

        /// An error indicating that the last page of a paginated request has been reached and no
        /// further request will be scheduled.
        case requestFinished

        /// An unknown error occured which cannot be described more precisely by using a particular
        /// `Squid.Error`.
        case unknown(Swift.Error)
    }

    /// By default, the logger logs all requests and their responses to the command line. However,
    /// logging is only enabled in debug mode - in release compiles, the code for logging is not
    /// even included in the binary. It is also possible to prevent any log statements in debug
    /// mode by using the `silence` method.
    public struct Logger {

        internal private(set) static var shared = Logger()
        private let formatter: DateFormatter = {
            let formatter = DateFormatter()
            formatter.dateFormat = "HH:mm:ss.SSS"
            return formatter
        }()

        /// Globally enables or disables logging for the Squid library. Has no effect in release
        /// compiles.
        ///
        /// - Parameter doSilence: Whether to disable (`true`) or enable (`false`) logging.
        public static func silence(_ doSilence: Bool) {
            Logger.shared.silenced = doSilence
        }

        private var silenced = false

        internal func log(_ text: @autoclosure () -> String) {
            #if DEBUG
            if !silenced {
                let date = self.formatter.string(from: Date())
                print(
                    " \n".prefixed(with: "[Squid @ \(date)]") + "\n" +
                    (text() + "\n ").prefixed(with: "[Squid] ")
                )
            }
            #endif
        }
    }
}
